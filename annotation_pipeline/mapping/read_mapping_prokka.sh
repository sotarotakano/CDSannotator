#!/bin/bash
#echo -n INPUT TARGET DIR:
#read -r target_dir
#export PATH="/Users/soutacano/Scripts/get_entrez_info.py:$PATH"

usage_exit() {
    echo "Usage: $0 [-i inputdir] [--overwrite_bw] [--overwrite_LCA] item ..." 1>&2
    exit 1
}

# get script (parent) directory
script_dir=$(cd $(dirname $0); cd .. ; pwd)

# load contig file
source "$script_dir"/CDSannotator.config

# initiallizing conda before using virtual environment
source "$conda_profile"

ow_bowtie=0
ow_summary=0
ow_annotation=0
while getopts "i:b:c:d:-:" opt
do    
    case "$opt" in
        i) target_dir=$OPTARG ;;
        b) bastadata=$OPTARG ;;
        c) clusterdata=$OPTARG ;;
        d) diamonddata=$OPTARG ;;
        -) 
            case $OPTARG in
            overwrite_bw) ow_bowtie=1 ;;
            overwrite_summary) ow_summary=1 ;;
            overwrite_annotation) ow_annotation=1 ;;
             \?) usage exit ;;
        esac
        ;;
        \?) usage_exit ;;
    esac
done

cd "$target_dir" || exit

echo "$clusterdata"
echo "$diamonddata"
echo "$bastadata"


bowtie2_mapping(){
    inputffn="$1"
    echo "[bowitie2_mapping] Loading ${inputffn}"
    
    prefix=$(echo "$inputffn" | awk -F"/" '{print $NF}' | awk -F"[./]" '{print$(NF-1)}')
    echo $prefix

    if [ -f bowtie2_results/"$prefix"/"${prefix}"_bowtie2stats.txt ] && [ "$ow_bowtie" == 0 ];then
        echo "[bowitie2_mapping] output files exists. skip this process."
        return 0
    fi

    bowtie2-build -f "$inputffn" "$prefix"_bowtie2ref

    fq1=./clean_fastq/${prefix}_1.fq.gz
    fq2=./clean_fastq/${prefix}_2.fq.gz

    if [ -f "${fq1}" ] && [ -f "${fq2}" ] ; then
        echo "Loading... ${fq1} and ${fq2}..."
        bowtie2 -x "$prefix"_bowtie2ref -1 "${fq1}" -2 "${fq2}" --sensitive-local -p $thread | samtools view -@ $thread -bS > "$prefix".bam || return 0
    else
        echo "Oops! either of ${fq1} and ${fq2} does not exist..."
        return 0
    fi
    echo ".bam file generated."
    samtools sort -@ $thread -m 4G "$prefix".bam > sorted.bam
    samtools depth sorted.bam -aa > "$prefix"_depth.txt
    samtools index sorted.bam
    samtools idxstats sorted.bam > "$prefix"_bowtie2stats.txt
    rm -f sorted.bam sorted.bam.bai "${prefix}.bam" "$prefix"_depth.txt

    if [ ! -d "bowtie2_results/$prefix" ];then
        mkdir -p bowtie2_results/"$prefix"
    fi

    find . -maxdepth 1 -type f -name "${prefix}_bowtie2ref*" | xargs -I% rm % 
    mv "${prefix}_bowtie2stats.txt" bowtie2_results/"$prefix"/
}



if [ ! -f "$clusterdata" ]; then
    echo "cluster data is not found"
    exit
fi

if [ ! -f "$bastadata" ]; then
    echo "basta data is not found"
    exit
fi


if [ ! -f "$diamonddata" ]; then
    echo "diamond data is not found"
    exit
fi

if [ ! -d "bowtie2_results" ];then
    mkdir bowtie2_results
fi

# First, searching ffn files generated by prokka and perform bowtie2 mapping to CDSs in a ffn file
for ffn in $(\find ./prokka_results -maxdepth 2 -name "*.ffn" -type f); do
    bowtie2_mapping "${ffn}"
done



# using python script for creating summary file
cwd=$(pwd)
if [ "$ow_summary" == 1 ];then
    python "$script_dir"/mapping/cdhit_mapping.py -i "$cwd" -c "$clusterdata" -ow || exit
else
    echo "[CDHIT-mapping] Convert each locustag to a representative locustag after CD-HIT clustering..."
    python "$script_dir"/mapping/cdhit_mapping.py -i "$cwd" -c "$clusterdata" || exit
fi


# using python script for annotation
cwd=$(pwd)

if [ "$ow_annotation" == 1 ];then
    python "$script_dir"/annotation/annotate_bowtiedata.py -i "$cwd" -d "$diamonddata" -b "$bastadata" -ow -gp
else
    python "$script_dir"/annotation/annotate_bowtiedata.py -i "$cwd" -d "$diamonddata" -b "$bastadata" -gp
fi
